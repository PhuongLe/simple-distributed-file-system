syntax = "proto3";

package fs533pb;

option go_package = ".;fs533pb";

message WriteRegisterRequest{
    string fs533filename = 1;
    string requestId = 2;
}

message WriteRegisterResponse{
    repeated string preferenceNodes = 1;
    int32 fileVersion = 2;
    bool needUserInteraction = 3;
}

message WritePreparationRequest{
    string fs533filename = 1;
    bytes fs533filevalue = 2;    
    int32 fileVersion = 3;
    string requestId = 4;
}

message WritePreparationResponse{
    int32 fileSize = 1;    
}

message WriteEndRequest{
    string fs533filename = 1;
    int32 fileSize = 2;
    string requestId = 3;
    bool cancelWriteRegistration = 4;

    bool commit = 5;
}

message WriteEndResponse{
}

message ReadAcquireRequest{
    string senderAddress = 1;
    string fs533filename = 2;
}

message ReadAcquireResponse{
    bool status = 1;    
    int32 fileVersion = 2;
    repeated string preferenceNodes = 3;
}

message ReadRequest{
    string fs533filename = 1;
    int32 fileVersion = 2;
}

message ReadResponse{
    bytes fs533filevalue = 1;
}

message DeleteRequest{
    string fs533filename = 1;
    string senderAddress = 2;
}

message DeleteResponse{
    bool status = 1;    
}

message LocateRequest{
    string fs533filename = 1;
}

message LocateResponse{
    message PreferenceNode{
        string nodebyAddress = 1;
        string nodebyName = 2;        
    }
    string fs533filename = 1;
    int32 fs533fileVersion = 2;
    int32 fs533fileSize = 3;
    repeated PreferenceNode replicas = 4;
}

message AllFilesResponse{
    repeated LocateResponse Files = 1;
}

message BackupRequest{
    message WriteTransaction {
        string Fs533FileName = 1;
        int32 Fs533FileVersion = 2;
        string RequestID = 3;
        repeated string PreferenceNodes = 4;
        int64 RegisteredTime  = 5;
    }
    message Fs533FileMetadata {
        string Fs533FileName = 1;
        int32 Fs533FileVersion = 2;
        int32 Fs533FileSize = 3;
        repeated string PreferenceNodes = 4;
    }
    repeated Fs533FileMetadata Fs533Files = 1;
    repeated WriteTransaction PendingWriteTransactions = 2;
    int32 Counter = 3;
}

message BackupResponse{
}

message PromoteRequest{
    string newMasterNode = 1;
}

message BackupFileRequest{
    string TargetNode = 1;
    string Fs533FileName = 2;
    int32 Fs533FileSize = 3;  
    int32 Fs533FileVersion = 4;
}

message CopyReplicaRequest{
    string fs533filename = 1;
    bytes fs533filevalue = 2;  
    int32 Fs533FileSize = 3;  
    int32 fileVersion = 4;
}

message VotingRequest{
    int32 ElectionTerm = 1;
    string CandidateAddress = 2;
}

message VotingResponse{
    bool Accepted = 1;
}

message AnnouncementRequest{
    string newMasterAddress = 1;
}

message Empty {}

service FileService{
    //This API is to register a write operation to the master. The master will then return the file version in turn to this request along with its preference nodes where its replacas are
    rpc WriteRegister (WriteRegisterRequest) returns (WriteRegisterResponse);

    //This API is to stream file content to the replica server. This is phase 1 or the 2PC protocol
    rpc WritePrepare (stream WritePreparationRequest) returns (WritePreparationResponse);

    //This API is to execute the write operation on the replica server. This is phase 2 or the 2PC protocol
    rpc WriteEnd (WriteEndRequest) returns (WriteEndResponse);

    //This API is to register a read operation to the master. The master will then return the file version in turn to this request along with its preference nodes where its replacas are
    rpc ReadAcquire (ReadAcquireRequest) returns (ReadAcquireResponse);

    //This API is to stream file content from the replica server.
    rpc Read (ReadRequest) returns (stream ReadResponse);

    //This API is to stream file content from the replica server.
    rpc Delete (DeleteRequest) returns (DeleteResponse);

    //This API is to update all file metadatas from master to the backups
    rpc Backup(BackupRequest) returns(BackupResponse);

    //This API is to promote new master node which is sent by incumbent master
    rpc Promote(PromoteRequest) returns(Empty);

    //This API is to request a node to copy its replica to another node, this request is sent by incubent master
    rpc BackupFile(BackupFileRequest) returns(Empty);

    //This API is to transfer a replica to the target node
    rpc CopyReplica(stream CopyReplicaRequest) returns(Empty);

    //This API is for self voting to be the new master node
    rpc Vote(VotingRequest) returns(VotingResponse);

    //This API is to announce the new master role
    rpc Announce(AnnouncementRequest) returns(Empty);

    //This API is to query all file on fs533 file server.
    rpc ListAll(Empty) returns (AllFilesResponse);

    //This API is to delete all files
    rpc DeleteAll(Empty) returns (Empty);

    //This API is to locate file information of a given fs533 file on file server
    rpc Locate(LocateRequest) returns (LocateResponse);
}
