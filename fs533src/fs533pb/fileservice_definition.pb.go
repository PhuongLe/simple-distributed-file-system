// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: fileservice_definition.proto

package fs533pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WriteRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filename string `protobuf:"bytes,1,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
	RequestId     string `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *WriteRegisterRequest) Reset() {
	*x = WriteRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRegisterRequest) ProtoMessage() {}

func (x *WriteRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRegisterRequest.ProtoReflect.Descriptor instead.
func (*WriteRegisterRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{0}
}

func (x *WriteRegisterRequest) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

func (x *WriteRegisterRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type WriteRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreferenceNodes     []string `protobuf:"bytes,1,rep,name=preferenceNodes,proto3" json:"preferenceNodes,omitempty"`
	FileVersion         int32    `protobuf:"varint,2,opt,name=fileVersion,proto3" json:"fileVersion,omitempty"`
	NeedUserInteraction bool     `protobuf:"varint,3,opt,name=needUserInteraction,proto3" json:"needUserInteraction,omitempty"`
}

func (x *WriteRegisterResponse) Reset() {
	*x = WriteRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRegisterResponse) ProtoMessage() {}

func (x *WriteRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRegisterResponse.ProtoReflect.Descriptor instead.
func (*WriteRegisterResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{1}
}

func (x *WriteRegisterResponse) GetPreferenceNodes() []string {
	if x != nil {
		return x.PreferenceNodes
	}
	return nil
}

func (x *WriteRegisterResponse) GetFileVersion() int32 {
	if x != nil {
		return x.FileVersion
	}
	return 0
}

func (x *WriteRegisterResponse) GetNeedUserInteraction() bool {
	if x != nil {
		return x.NeedUserInteraction
	}
	return false
}

type WritePreparationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filename  string `protobuf:"bytes,1,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
	Fs533Filevalue []byte `protobuf:"bytes,2,opt,name=fs533filevalue,proto3" json:"fs533filevalue,omitempty"`
	FileVersion    int32  `protobuf:"varint,3,opt,name=fileVersion,proto3" json:"fileVersion,omitempty"`
	RequestId      string `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *WritePreparationRequest) Reset() {
	*x = WritePreparationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePreparationRequest) ProtoMessage() {}

func (x *WritePreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePreparationRequest.ProtoReflect.Descriptor instead.
func (*WritePreparationRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{2}
}

func (x *WritePreparationRequest) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

func (x *WritePreparationRequest) GetFs533Filevalue() []byte {
	if x != nil {
		return x.Fs533Filevalue
	}
	return nil
}

func (x *WritePreparationRequest) GetFileVersion() int32 {
	if x != nil {
		return x.FileVersion
	}
	return 0
}

func (x *WritePreparationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type WritePreparationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize int32 `protobuf:"varint,1,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
}

func (x *WritePreparationResponse) Reset() {
	*x = WritePreparationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePreparationResponse) ProtoMessage() {}

func (x *WritePreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePreparationResponse.ProtoReflect.Descriptor instead.
func (*WritePreparationResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{3}
}

func (x *WritePreparationResponse) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type WriteEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filename           string `protobuf:"bytes,1,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
	FileSize                int32  `protobuf:"varint,2,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	RequestId               string `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	CancelWriteRegistration bool   `protobuf:"varint,4,opt,name=cancelWriteRegistration,proto3" json:"cancelWriteRegistration,omitempty"`
	Commit                  bool   `protobuf:"varint,5,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *WriteEndRequest) Reset() {
	*x = WriteEndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteEndRequest) ProtoMessage() {}

func (x *WriteEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteEndRequest.ProtoReflect.Descriptor instead.
func (*WriteEndRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{4}
}

func (x *WriteEndRequest) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

func (x *WriteEndRequest) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *WriteEndRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *WriteEndRequest) GetCancelWriteRegistration() bool {
	if x != nil {
		return x.CancelWriteRegistration
	}
	return false
}

func (x *WriteEndRequest) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

type WriteEndResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WriteEndResponse) Reset() {
	*x = WriteEndResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteEndResponse) ProtoMessage() {}

func (x *WriteEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteEndResponse.ProtoReflect.Descriptor instead.
func (*WriteEndResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{5}
}

type ReadAcquireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress string `protobuf:"bytes,1,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
	Fs533Filename string `protobuf:"bytes,2,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
}

func (x *ReadAcquireRequest) Reset() {
	*x = ReadAcquireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAcquireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAcquireRequest) ProtoMessage() {}

func (x *ReadAcquireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAcquireRequest.ProtoReflect.Descriptor instead.
func (*ReadAcquireRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{6}
}

func (x *ReadAcquireRequest) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *ReadAcquireRequest) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

type ReadAcquireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	FileVersion     int32    `protobuf:"varint,2,opt,name=fileVersion,proto3" json:"fileVersion,omitempty"`
	PreferenceNodes []string `protobuf:"bytes,3,rep,name=preferenceNodes,proto3" json:"preferenceNodes,omitempty"`
}

func (x *ReadAcquireResponse) Reset() {
	*x = ReadAcquireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAcquireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAcquireResponse) ProtoMessage() {}

func (x *ReadAcquireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAcquireResponse.ProtoReflect.Descriptor instead.
func (*ReadAcquireResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{7}
}

func (x *ReadAcquireResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ReadAcquireResponse) GetFileVersion() int32 {
	if x != nil {
		return x.FileVersion
	}
	return 0
}

func (x *ReadAcquireResponse) GetPreferenceNodes() []string {
	if x != nil {
		return x.PreferenceNodes
	}
	return nil
}

type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filename string `protobuf:"bytes,1,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
	FileVersion   int32  `protobuf:"varint,2,opt,name=fileVersion,proto3" json:"fileVersion,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{8}
}

func (x *ReadRequest) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

func (x *ReadRequest) GetFileVersion() int32 {
	if x != nil {
		return x.FileVersion
	}
	return 0
}

type ReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filevalue []byte `protobuf:"bytes,1,opt,name=fs533filevalue,proto3" json:"fs533filevalue,omitempty"`
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{9}
}

func (x *ReadResponse) GetFs533Filevalue() []byte {
	if x != nil {
		return x.Fs533Filevalue
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filename string `protobuf:"bytes,1,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
	SenderAddress string `protobuf:"bytes,2,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRequest) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

func (x *DeleteRequest) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type LocateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filename string `protobuf:"bytes,1,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
}

func (x *LocateRequest) Reset() {
	*x = LocateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateRequest) ProtoMessage() {}

func (x *LocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateRequest.ProtoReflect.Descriptor instead.
func (*LocateRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{12}
}

func (x *LocateRequest) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

type LocateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filename    string                           `protobuf:"bytes,1,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
	Fs533FileVersion int32                            `protobuf:"varint,2,opt,name=fs533fileVersion,proto3" json:"fs533fileVersion,omitempty"`
	Fs533FileSize    int32                            `protobuf:"varint,3,opt,name=fs533fileSize,proto3" json:"fs533fileSize,omitempty"`
	Replicas         []*LocateResponse_PreferenceNode `protobuf:"bytes,4,rep,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *LocateResponse) Reset() {
	*x = LocateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateResponse) ProtoMessage() {}

func (x *LocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateResponse.ProtoReflect.Descriptor instead.
func (*LocateResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{13}
}

func (x *LocateResponse) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

func (x *LocateResponse) GetFs533FileVersion() int32 {
	if x != nil {
		return x.Fs533FileVersion
	}
	return 0
}

func (x *LocateResponse) GetFs533FileSize() int32 {
	if x != nil {
		return x.Fs533FileSize
	}
	return 0
}

func (x *LocateResponse) GetReplicas() []*LocateResponse_PreferenceNode {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type AllFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*LocateResponse `protobuf:"bytes,1,rep,name=Files,proto3" json:"Files,omitempty"`
}

func (x *AllFilesResponse) Reset() {
	*x = AllFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllFilesResponse) ProtoMessage() {}

func (x *AllFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllFilesResponse.ProtoReflect.Descriptor instead.
func (*AllFilesResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{14}
}

func (x *AllFilesResponse) GetFiles() []*LocateResponse {
	if x != nil {
		return x.Files
	}
	return nil
}

type BackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Files               []*BackupRequest_Fs533FileMetadata `protobuf:"bytes,1,rep,name=Fs533Files,proto3" json:"Fs533Files,omitempty"`
	PendingWriteTransactions []*BackupRequest_WriteTransaction  `protobuf:"bytes,2,rep,name=PendingWriteTransactions,proto3" json:"PendingWriteTransactions,omitempty"`
	Counter                  int32                              `protobuf:"varint,3,opt,name=Counter,proto3" json:"Counter,omitempty"`
}

func (x *BackupRequest) Reset() {
	*x = BackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRequest) ProtoMessage() {}

func (x *BackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRequest.ProtoReflect.Descriptor instead.
func (*BackupRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{15}
}

func (x *BackupRequest) GetFs533Files() []*BackupRequest_Fs533FileMetadata {
	if x != nil {
		return x.Fs533Files
	}
	return nil
}

func (x *BackupRequest) GetPendingWriteTransactions() []*BackupRequest_WriteTransaction {
	if x != nil {
		return x.PendingWriteTransactions
	}
	return nil
}

func (x *BackupRequest) GetCounter() int32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type BackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackupResponse) Reset() {
	*x = BackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupResponse) ProtoMessage() {}

func (x *BackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupResponse.ProtoReflect.Descriptor instead.
func (*BackupResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{16}
}

type PromoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewMasterNode string `protobuf:"bytes,1,opt,name=newMasterNode,proto3" json:"newMasterNode,omitempty"`
}

func (x *PromoteRequest) Reset() {
	*x = PromoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteRequest) ProtoMessage() {}

func (x *PromoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteRequest.ProtoReflect.Descriptor instead.
func (*PromoteRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{17}
}

func (x *PromoteRequest) GetNewMasterNode() string {
	if x != nil {
		return x.NewMasterNode
	}
	return ""
}

type BackupFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetNode       string `protobuf:"bytes,1,opt,name=TargetNode,proto3" json:"TargetNode,omitempty"`
	Fs533FileName    string `protobuf:"bytes,2,opt,name=Fs533FileName,proto3" json:"Fs533FileName,omitempty"`
	Fs533FileSize    int32  `protobuf:"varint,3,opt,name=Fs533FileSize,proto3" json:"Fs533FileSize,omitempty"`
	Fs533FileVersion int32  `protobuf:"varint,4,opt,name=Fs533FileVersion,proto3" json:"Fs533FileVersion,omitempty"`
}

func (x *BackupFileRequest) Reset() {
	*x = BackupFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupFileRequest) ProtoMessage() {}

func (x *BackupFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupFileRequest.ProtoReflect.Descriptor instead.
func (*BackupFileRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{18}
}

func (x *BackupFileRequest) GetTargetNode() string {
	if x != nil {
		return x.TargetNode
	}
	return ""
}

func (x *BackupFileRequest) GetFs533FileName() string {
	if x != nil {
		return x.Fs533FileName
	}
	return ""
}

func (x *BackupFileRequest) GetFs533FileSize() int32 {
	if x != nil {
		return x.Fs533FileSize
	}
	return 0
}

func (x *BackupFileRequest) GetFs533FileVersion() int32 {
	if x != nil {
		return x.Fs533FileVersion
	}
	return 0
}

type CopyReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533Filename  string `protobuf:"bytes,1,opt,name=fs533filename,proto3" json:"fs533filename,omitempty"`
	Fs533Filevalue []byte `protobuf:"bytes,2,opt,name=fs533filevalue,proto3" json:"fs533filevalue,omitempty"`
	Fs533FileSize  int32  `protobuf:"varint,3,opt,name=Fs533FileSize,proto3" json:"Fs533FileSize,omitempty"`
	FileVersion    int32  `protobuf:"varint,4,opt,name=fileVersion,proto3" json:"fileVersion,omitempty"`
}

func (x *CopyReplicaRequest) Reset() {
	*x = CopyReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyReplicaRequest) ProtoMessage() {}

func (x *CopyReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyReplicaRequest.ProtoReflect.Descriptor instead.
func (*CopyReplicaRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{19}
}

func (x *CopyReplicaRequest) GetFs533Filename() string {
	if x != nil {
		return x.Fs533Filename
	}
	return ""
}

func (x *CopyReplicaRequest) GetFs533Filevalue() []byte {
	if x != nil {
		return x.Fs533Filevalue
	}
	return nil
}

func (x *CopyReplicaRequest) GetFs533FileSize() int32 {
	if x != nil {
		return x.Fs533FileSize
	}
	return 0
}

func (x *CopyReplicaRequest) GetFileVersion() int32 {
	if x != nil {
		return x.FileVersion
	}
	return 0
}

type VotingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElectionTerm     int32  `protobuf:"varint,1,opt,name=ElectionTerm,proto3" json:"ElectionTerm,omitempty"`
	CandidateAddress string `protobuf:"bytes,2,opt,name=CandidateAddress,proto3" json:"CandidateAddress,omitempty"`
}

func (x *VotingRequest) Reset() {
	*x = VotingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingRequest) ProtoMessage() {}

func (x *VotingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotingRequest.ProtoReflect.Descriptor instead.
func (*VotingRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{20}
}

func (x *VotingRequest) GetElectionTerm() int32 {
	if x != nil {
		return x.ElectionTerm
	}
	return 0
}

func (x *VotingRequest) GetCandidateAddress() string {
	if x != nil {
		return x.CandidateAddress
	}
	return ""
}

type VotingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted bool `protobuf:"varint,1,opt,name=Accepted,proto3" json:"Accepted,omitempty"`
}

func (x *VotingResponse) Reset() {
	*x = VotingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingResponse) ProtoMessage() {}

func (x *VotingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotingResponse.ProtoReflect.Descriptor instead.
func (*VotingResponse) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{21}
}

func (x *VotingResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type AnnouncementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewMasterAddress string `protobuf:"bytes,1,opt,name=newMasterAddress,proto3" json:"newMasterAddress,omitempty"`
}

func (x *AnnouncementRequest) Reset() {
	*x = AnnouncementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnouncementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnouncementRequest) ProtoMessage() {}

func (x *AnnouncementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnouncementRequest.ProtoReflect.Descriptor instead.
func (*AnnouncementRequest) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{22}
}

func (x *AnnouncementRequest) GetNewMasterAddress() string {
	if x != nil {
		return x.NewMasterAddress
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{23}
}

type LocateResponse_PreferenceNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodebyAddress string `protobuf:"bytes,1,opt,name=nodebyAddress,proto3" json:"nodebyAddress,omitempty"`
	NodebyName    string `protobuf:"bytes,2,opt,name=nodebyName,proto3" json:"nodebyName,omitempty"`
}

func (x *LocateResponse_PreferenceNode) Reset() {
	*x = LocateResponse_PreferenceNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateResponse_PreferenceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateResponse_PreferenceNode) ProtoMessage() {}

func (x *LocateResponse_PreferenceNode) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateResponse_PreferenceNode.ProtoReflect.Descriptor instead.
func (*LocateResponse_PreferenceNode) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{13, 0}
}

func (x *LocateResponse_PreferenceNode) GetNodebyAddress() string {
	if x != nil {
		return x.NodebyAddress
	}
	return ""
}

func (x *LocateResponse_PreferenceNode) GetNodebyName() string {
	if x != nil {
		return x.NodebyName
	}
	return ""
}

type BackupRequest_WriteTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533FileName    string   `protobuf:"bytes,1,opt,name=Fs533FileName,proto3" json:"Fs533FileName,omitempty"`
	Fs533FileVersion int32    `protobuf:"varint,2,opt,name=Fs533FileVersion,proto3" json:"Fs533FileVersion,omitempty"`
	RequestID        string   `protobuf:"bytes,3,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	PreferenceNodes  []string `protobuf:"bytes,4,rep,name=PreferenceNodes,proto3" json:"PreferenceNodes,omitempty"`
	RegisteredTime   int64    `protobuf:"varint,5,opt,name=RegisteredTime,proto3" json:"RegisteredTime,omitempty"`
}

func (x *BackupRequest_WriteTransaction) Reset() {
	*x = BackupRequest_WriteTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRequest_WriteTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRequest_WriteTransaction) ProtoMessage() {}

func (x *BackupRequest_WriteTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRequest_WriteTransaction.ProtoReflect.Descriptor instead.
func (*BackupRequest_WriteTransaction) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BackupRequest_WriteTransaction) GetFs533FileName() string {
	if x != nil {
		return x.Fs533FileName
	}
	return ""
}

func (x *BackupRequest_WriteTransaction) GetFs533FileVersion() int32 {
	if x != nil {
		return x.Fs533FileVersion
	}
	return 0
}

func (x *BackupRequest_WriteTransaction) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *BackupRequest_WriteTransaction) GetPreferenceNodes() []string {
	if x != nil {
		return x.PreferenceNodes
	}
	return nil
}

func (x *BackupRequest_WriteTransaction) GetRegisteredTime() int64 {
	if x != nil {
		return x.RegisteredTime
	}
	return 0
}

type BackupRequest_Fs533FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fs533FileName    string   `protobuf:"bytes,1,opt,name=Fs533FileName,proto3" json:"Fs533FileName,omitempty"`
	Fs533FileVersion int32    `protobuf:"varint,2,opt,name=Fs533FileVersion,proto3" json:"Fs533FileVersion,omitempty"`
	Fs533FileSize    int32    `protobuf:"varint,3,opt,name=Fs533FileSize,proto3" json:"Fs533FileSize,omitempty"`
	PreferenceNodes  []string `protobuf:"bytes,4,rep,name=PreferenceNodes,proto3" json:"PreferenceNodes,omitempty"`
}

func (x *BackupRequest_Fs533FileMetadata) Reset() {
	*x = BackupRequest_Fs533FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileservice_definition_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRequest_Fs533FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRequest_Fs533FileMetadata) ProtoMessage() {}

func (x *BackupRequest_Fs533FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_fileservice_definition_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRequest_Fs533FileMetadata.ProtoReflect.Descriptor instead.
func (*BackupRequest_Fs533FileMetadata) Descriptor() ([]byte, []int) {
	return file_fileservice_definition_proto_rawDescGZIP(), []int{15, 1}
}

func (x *BackupRequest_Fs533FileMetadata) GetFs533FileName() string {
	if x != nil {
		return x.Fs533FileName
	}
	return ""
}

func (x *BackupRequest_Fs533FileMetadata) GetFs533FileVersion() int32 {
	if x != nil {
		return x.Fs533FileVersion
	}
	return 0
}

func (x *BackupRequest_Fs533FileMetadata) GetFs533FileSize() int32 {
	if x != nil {
		return x.Fs533FileSize
	}
	return 0
}

func (x *BackupRequest_Fs533FileMetadata) GetPreferenceNodes() []string {
	if x != nil {
		return x.PreferenceNodes
	}
	return nil
}

var File_fileservice_definition_proto protoreflect.FileDescriptor

var file_fileservice_definition_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x22, 0x5a, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x65, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x17,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x18, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc3, 0x01,
	0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x73, 0x35, 0x33,
	0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x13, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x73, 0x35, 0x33,
	0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0c, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x73, 0x35,
	0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x28, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x35, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xa4, 0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x73, 0x35,
	0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x73,
	0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66,
	0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x1a, 0x56, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x73,
	0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xe7, 0x04, 0x0a, 0x0d,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x0a, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x46, 0x73, 0x35,
	0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x18, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x73, 0x35, 0x33,
	0x33, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x18, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0xd4, 0x01, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x73, 0x35,
	0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb5, 0x01,
	0x0a, 0x11, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x73, 0x35, 0x33,
	0x33, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x73, 0x35,
	0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x46, 0x73,
	0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x77,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22,
	0xab, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x73,
	0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x73, 0x35,
	0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01,
	0x0a, 0x12, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x73, 0x35,
	0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x73,
	0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x73, 0x35, 0x33, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x46, 0x73, 0x35, 0x33, 0x33,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x0d, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2c, 0x0a, 0x0e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x13, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa9, 0x07, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70,
	0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x3f, 0x0a, 0x08,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33,
	0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0b, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x66,
	0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x73, 0x35, 0x33,
	0x33, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x14, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x39,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x73,
	0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12,
	0x17, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x12, 0x1b, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01,
	0x12, 0x37, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33,
	0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0e,
	0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19,
	0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x0e, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x73, 0x35, 0x33, 0x33,
	0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x66, 0x73, 0x35, 0x33, 0x33, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fileservice_definition_proto_rawDescOnce sync.Once
	file_fileservice_definition_proto_rawDescData = file_fileservice_definition_proto_rawDesc
)

func file_fileservice_definition_proto_rawDescGZIP() []byte {
	file_fileservice_definition_proto_rawDescOnce.Do(func() {
		file_fileservice_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_fileservice_definition_proto_rawDescData)
	})
	return file_fileservice_definition_proto_rawDescData
}

var file_fileservice_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_fileservice_definition_proto_goTypes = []interface{}{
	(*WriteRegisterRequest)(nil),            // 0: fs533pb.WriteRegisterRequest
	(*WriteRegisterResponse)(nil),           // 1: fs533pb.WriteRegisterResponse
	(*WritePreparationRequest)(nil),         // 2: fs533pb.WritePreparationRequest
	(*WritePreparationResponse)(nil),        // 3: fs533pb.WritePreparationResponse
	(*WriteEndRequest)(nil),                 // 4: fs533pb.WriteEndRequest
	(*WriteEndResponse)(nil),                // 5: fs533pb.WriteEndResponse
	(*ReadAcquireRequest)(nil),              // 6: fs533pb.ReadAcquireRequest
	(*ReadAcquireResponse)(nil),             // 7: fs533pb.ReadAcquireResponse
	(*ReadRequest)(nil),                     // 8: fs533pb.ReadRequest
	(*ReadResponse)(nil),                    // 9: fs533pb.ReadResponse
	(*DeleteRequest)(nil),                   // 10: fs533pb.DeleteRequest
	(*DeleteResponse)(nil),                  // 11: fs533pb.DeleteResponse
	(*LocateRequest)(nil),                   // 12: fs533pb.LocateRequest
	(*LocateResponse)(nil),                  // 13: fs533pb.LocateResponse
	(*AllFilesResponse)(nil),                // 14: fs533pb.AllFilesResponse
	(*BackupRequest)(nil),                   // 15: fs533pb.BackupRequest
	(*BackupResponse)(nil),                  // 16: fs533pb.BackupResponse
	(*PromoteRequest)(nil),                  // 17: fs533pb.PromoteRequest
	(*BackupFileRequest)(nil),               // 18: fs533pb.BackupFileRequest
	(*CopyReplicaRequest)(nil),              // 19: fs533pb.CopyReplicaRequest
	(*VotingRequest)(nil),                   // 20: fs533pb.VotingRequest
	(*VotingResponse)(nil),                  // 21: fs533pb.VotingResponse
	(*AnnouncementRequest)(nil),             // 22: fs533pb.AnnouncementRequest
	(*Empty)(nil),                           // 23: fs533pb.Empty
	(*LocateResponse_PreferenceNode)(nil),   // 24: fs533pb.LocateResponse.PreferenceNode
	(*BackupRequest_WriteTransaction)(nil),  // 25: fs533pb.BackupRequest.WriteTransaction
	(*BackupRequest_Fs533FileMetadata)(nil), // 26: fs533pb.BackupRequest.Fs533FileMetadata
}
var file_fileservice_definition_proto_depIdxs = []int32{
	24, // 0: fs533pb.LocateResponse.replicas:type_name -> fs533pb.LocateResponse.PreferenceNode
	13, // 1: fs533pb.AllFilesResponse.Files:type_name -> fs533pb.LocateResponse
	26, // 2: fs533pb.BackupRequest.Fs533Files:type_name -> fs533pb.BackupRequest.Fs533FileMetadata
	25, // 3: fs533pb.BackupRequest.PendingWriteTransactions:type_name -> fs533pb.BackupRequest.WriteTransaction
	0,  // 4: fs533pb.FileService.WriteRegister:input_type -> fs533pb.WriteRegisterRequest
	2,  // 5: fs533pb.FileService.WritePrepare:input_type -> fs533pb.WritePreparationRequest
	4,  // 6: fs533pb.FileService.WriteEnd:input_type -> fs533pb.WriteEndRequest
	6,  // 7: fs533pb.FileService.ReadAcquire:input_type -> fs533pb.ReadAcquireRequest
	8,  // 8: fs533pb.FileService.Read:input_type -> fs533pb.ReadRequest
	10, // 9: fs533pb.FileService.Delete:input_type -> fs533pb.DeleteRequest
	15, // 10: fs533pb.FileService.Backup:input_type -> fs533pb.BackupRequest
	17, // 11: fs533pb.FileService.Promote:input_type -> fs533pb.PromoteRequest
	18, // 12: fs533pb.FileService.BackupFile:input_type -> fs533pb.BackupFileRequest
	19, // 13: fs533pb.FileService.CopyReplica:input_type -> fs533pb.CopyReplicaRequest
	20, // 14: fs533pb.FileService.Vote:input_type -> fs533pb.VotingRequest
	22, // 15: fs533pb.FileService.Announce:input_type -> fs533pb.AnnouncementRequest
	23, // 16: fs533pb.FileService.ListAll:input_type -> fs533pb.Empty
	23, // 17: fs533pb.FileService.DeleteAll:input_type -> fs533pb.Empty
	12, // 18: fs533pb.FileService.Locate:input_type -> fs533pb.LocateRequest
	1,  // 19: fs533pb.FileService.WriteRegister:output_type -> fs533pb.WriteRegisterResponse
	3,  // 20: fs533pb.FileService.WritePrepare:output_type -> fs533pb.WritePreparationResponse
	5,  // 21: fs533pb.FileService.WriteEnd:output_type -> fs533pb.WriteEndResponse
	7,  // 22: fs533pb.FileService.ReadAcquire:output_type -> fs533pb.ReadAcquireResponse
	9,  // 23: fs533pb.FileService.Read:output_type -> fs533pb.ReadResponse
	11, // 24: fs533pb.FileService.Delete:output_type -> fs533pb.DeleteResponse
	16, // 25: fs533pb.FileService.Backup:output_type -> fs533pb.BackupResponse
	23, // 26: fs533pb.FileService.Promote:output_type -> fs533pb.Empty
	23, // 27: fs533pb.FileService.BackupFile:output_type -> fs533pb.Empty
	23, // 28: fs533pb.FileService.CopyReplica:output_type -> fs533pb.Empty
	21, // 29: fs533pb.FileService.Vote:output_type -> fs533pb.VotingResponse
	23, // 30: fs533pb.FileService.Announce:output_type -> fs533pb.Empty
	14, // 31: fs533pb.FileService.ListAll:output_type -> fs533pb.AllFilesResponse
	23, // 32: fs533pb.FileService.DeleteAll:output_type -> fs533pb.Empty
	13, // 33: fs533pb.FileService.Locate:output_type -> fs533pb.LocateResponse
	19, // [19:34] is the sub-list for method output_type
	4,  // [4:19] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_fileservice_definition_proto_init() }
func file_fileservice_definition_proto_init() {
	if File_fileservice_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fileservice_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePreparationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePreparationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteEndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteEndResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAcquireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAcquireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnouncementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateResponse_PreferenceNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRequest_WriteTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileservice_definition_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRequest_Fs533FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fileservice_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fileservice_definition_proto_goTypes,
		DependencyIndexes: file_fileservice_definition_proto_depIdxs,
		MessageInfos:      file_fileservice_definition_proto_msgTypes,
	}.Build()
	File_fileservice_definition_proto = out.File
	file_fileservice_definition_proto_rawDesc = nil
	file_fileservice_definition_proto_goTypes = nil
	file_fileservice_definition_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileServiceClient interface {
	//This API is to register a write operation to the master. The master will then return the file version in turn to this request along with its preference nodes where its replacas are
	WriteRegister(ctx context.Context, in *WriteRegisterRequest, opts ...grpc.CallOption) (*WriteRegisterResponse, error)
	//This API is to stream file content to the replica server. This is phase 1 or the 2PC protocol
	WritePrepare(ctx context.Context, opts ...grpc.CallOption) (FileService_WritePrepareClient, error)
	//This API is to execute the write operation on the replica server. This is phase 2 or the 2PC protocol
	WriteEnd(ctx context.Context, in *WriteEndRequest, opts ...grpc.CallOption) (*WriteEndResponse, error)
	//This API is to register a read operation to the master. The master will then return the file version in turn to this request along with its preference nodes where its replacas are
	ReadAcquire(ctx context.Context, in *ReadAcquireRequest, opts ...grpc.CallOption) (*ReadAcquireResponse, error)
	//This API is to stream file content from the replica server.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (FileService_ReadClient, error)
	//This API is to stream file content from the replica server.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	//This API is to update all file metadatas from master to the backups
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	//This API is to promote new master node which is sent by incumbent master
	Promote(ctx context.Context, in *PromoteRequest, opts ...grpc.CallOption) (*Empty, error)
	//This API is to request a node to copy its replica to another node, this request is sent by incubent master
	BackupFile(ctx context.Context, in *BackupFileRequest, opts ...grpc.CallOption) (*Empty, error)
	//This API is to transfer a replica to the target node
	CopyReplica(ctx context.Context, opts ...grpc.CallOption) (FileService_CopyReplicaClient, error)
	//This API is for self voting to be the new master node
	Vote(ctx context.Context, in *VotingRequest, opts ...grpc.CallOption) (*VotingResponse, error)
	//This API is to announce the new master role
	Announce(ctx context.Context, in *AnnouncementRequest, opts ...grpc.CallOption) (*Empty, error)
	//This API is to query all file on fs533 file server.
	ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllFilesResponse, error)
	//This API is to delete all files
	DeleteAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	//This API is to locate file information of a given fs533 file on file server
	Locate(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) WriteRegister(ctx context.Context, in *WriteRegisterRequest, opts ...grpc.CallOption) (*WriteRegisterResponse, error) {
	out := new(WriteRegisterResponse)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/WriteRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) WritePrepare(ctx context.Context, opts ...grpc.CallOption) (FileService_WritePrepareClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileService_serviceDesc.Streams[0], "/fs533pb.FileService/WritePrepare", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceWritePrepareClient{stream}
	return x, nil
}

type FileService_WritePrepareClient interface {
	Send(*WritePreparationRequest) error
	CloseAndRecv() (*WritePreparationResponse, error)
	grpc.ClientStream
}

type fileServiceWritePrepareClient struct {
	grpc.ClientStream
}

func (x *fileServiceWritePrepareClient) Send(m *WritePreparationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceWritePrepareClient) CloseAndRecv() (*WritePreparationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WritePreparationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) WriteEnd(ctx context.Context, in *WriteEndRequest, opts ...grpc.CallOption) (*WriteEndResponse, error) {
	out := new(WriteEndResponse)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/WriteEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ReadAcquire(ctx context.Context, in *ReadAcquireRequest, opts ...grpc.CallOption) (*ReadAcquireResponse, error) {
	out := new(ReadAcquireResponse)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/ReadAcquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (FileService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileService_serviceDesc.Streams[1], "/fs533pb.FileService/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type fileServiceReadClient struct {
	grpc.ClientStream
}

func (x *fileServiceReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Promote(ctx context.Context, in *PromoteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/Promote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) BackupFile(ctx context.Context, in *BackupFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/BackupFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CopyReplica(ctx context.Context, opts ...grpc.CallOption) (FileService_CopyReplicaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileService_serviceDesc.Streams[2], "/fs533pb.FileService/CopyReplica", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceCopyReplicaClient{stream}
	return x, nil
}

type FileService_CopyReplicaClient interface {
	Send(*CopyReplicaRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type fileServiceCopyReplicaClient struct {
	grpc.ClientStream
}

func (x *fileServiceCopyReplicaClient) Send(m *CopyReplicaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceCopyReplicaClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Vote(ctx context.Context, in *VotingRequest, opts ...grpc.CallOption) (*VotingResponse, error) {
	out := new(VotingResponse)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Announce(ctx context.Context, in *AnnouncementRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/Announce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllFilesResponse, error) {
	out := new(AllFilesResponse)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Locate(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error) {
	out := new(LocateResponse)
	err := c.cc.Invoke(ctx, "/fs533pb.FileService/Locate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
type FileServiceServer interface {
	//This API is to register a write operation to the master. The master will then return the file version in turn to this request along with its preference nodes where its replacas are
	WriteRegister(context.Context, *WriteRegisterRequest) (*WriteRegisterResponse, error)
	//This API is to stream file content to the replica server. This is phase 1 or the 2PC protocol
	WritePrepare(FileService_WritePrepareServer) error
	//This API is to execute the write operation on the replica server. This is phase 2 or the 2PC protocol
	WriteEnd(context.Context, *WriteEndRequest) (*WriteEndResponse, error)
	//This API is to register a read operation to the master. The master will then return the file version in turn to this request along with its preference nodes where its replacas are
	ReadAcquire(context.Context, *ReadAcquireRequest) (*ReadAcquireResponse, error)
	//This API is to stream file content from the replica server.
	Read(*ReadRequest, FileService_ReadServer) error
	//This API is to stream file content from the replica server.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	//This API is to update all file metadatas from master to the backups
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	//This API is to promote new master node which is sent by incumbent master
	Promote(context.Context, *PromoteRequest) (*Empty, error)
	//This API is to request a node to copy its replica to another node, this request is sent by incubent master
	BackupFile(context.Context, *BackupFileRequest) (*Empty, error)
	//This API is to transfer a replica to the target node
	CopyReplica(FileService_CopyReplicaServer) error
	//This API is for self voting to be the new master node
	Vote(context.Context, *VotingRequest) (*VotingResponse, error)
	//This API is to announce the new master role
	Announce(context.Context, *AnnouncementRequest) (*Empty, error)
	//This API is to query all file on fs533 file server.
	ListAll(context.Context, *Empty) (*AllFilesResponse, error)
	//This API is to delete all files
	DeleteAll(context.Context, *Empty) (*Empty, error)
	//This API is to locate file information of a given fs533 file on file server
	Locate(context.Context, *LocateRequest) (*LocateResponse, error)
}

// UnimplementedFileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (*UnimplementedFileServiceServer) WriteRegister(context.Context, *WriteRegisterRequest) (*WriteRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRegister not implemented")
}
func (*UnimplementedFileServiceServer) WritePrepare(FileService_WritePrepareServer) error {
	return status.Errorf(codes.Unimplemented, "method WritePrepare not implemented")
}
func (*UnimplementedFileServiceServer) WriteEnd(context.Context, *WriteEndRequest) (*WriteEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteEnd not implemented")
}
func (*UnimplementedFileServiceServer) ReadAcquire(context.Context, *ReadAcquireRequest) (*ReadAcquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAcquire not implemented")
}
func (*UnimplementedFileServiceServer) Read(*ReadRequest, FileService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedFileServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedFileServiceServer) Backup(context.Context, *BackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedFileServiceServer) Promote(context.Context, *PromoteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (*UnimplementedFileServiceServer) BackupFile(context.Context, *BackupFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupFile not implemented")
}
func (*UnimplementedFileServiceServer) CopyReplica(FileService_CopyReplicaServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyReplica not implemented")
}
func (*UnimplementedFileServiceServer) Vote(context.Context, *VotingRequest) (*VotingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedFileServiceServer) Announce(context.Context, *AnnouncementRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (*UnimplementedFileServiceServer) ListAll(context.Context, *Empty) (*AllFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (*UnimplementedFileServiceServer) DeleteAll(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (*UnimplementedFileServiceServer) Locate(context.Context, *LocateRequest) (*LocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Locate not implemented")
}

func RegisterFileServiceServer(s *grpc.Server, srv FileServiceServer) {
	s.RegisterService(&_FileService_serviceDesc, srv)
}

func _FileService_WriteRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).WriteRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/WriteRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).WriteRegister(ctx, req.(*WriteRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_WritePrepare_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).WritePrepare(&fileServiceWritePrepareServer{stream})
}

type FileService_WritePrepareServer interface {
	SendAndClose(*WritePreparationResponse) error
	Recv() (*WritePreparationRequest, error)
	grpc.ServerStream
}

type fileServiceWritePrepareServer struct {
	grpc.ServerStream
}

func (x *fileServiceWritePrepareServer) SendAndClose(m *WritePreparationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceWritePrepareServer) Recv() (*WritePreparationRequest, error) {
	m := new(WritePreparationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_WriteEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).WriteEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/WriteEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).WriteEnd(ctx, req.(*WriteEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ReadAcquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ReadAcquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/ReadAcquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ReadAcquire(ctx, req.(*ReadAcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).Read(m, &fileServiceReadServer{stream})
}

type FileService_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type fileServiceReadServer struct {
	grpc.ServerStream
}

func (x *fileServiceReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Promote(ctx, req.(*PromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_BackupFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).BackupFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/BackupFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).BackupFile(ctx, req.(*BackupFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CopyReplica_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).CopyReplica(&fileServiceCopyReplicaServer{stream})
}

type FileService_CopyReplicaServer interface {
	SendAndClose(*Empty) error
	Recv() (*CopyReplicaRequest, error)
	grpc.ServerStream
}

type fileServiceCopyReplicaServer struct {
	grpc.ServerStream
}

func (x *fileServiceCopyReplicaServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceCopyReplicaServer) Recv() (*CopyReplicaRequest, error) {
	m := new(CopyReplicaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Vote(ctx, req.(*VotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Announce(ctx, req.(*AnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Locate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Locate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs533pb.FileService/Locate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Locate(ctx, req.(*LocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fs533pb.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteRegister",
			Handler:    _FileService_WriteRegister_Handler,
		},
		{
			MethodName: "WriteEnd",
			Handler:    _FileService_WriteEnd_Handler,
		},
		{
			MethodName: "ReadAcquire",
			Handler:    _FileService_ReadAcquire_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileService_Delete_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _FileService_Backup_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _FileService_Promote_Handler,
		},
		{
			MethodName: "BackupFile",
			Handler:    _FileService_BackupFile_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _FileService_Vote_Handler,
		},
		{
			MethodName: "Announce",
			Handler:    _FileService_Announce_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _FileService_ListAll_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _FileService_DeleteAll_Handler,
		},
		{
			MethodName: "Locate",
			Handler:    _FileService_Locate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WritePrepare",
			Handler:       _FileService_WritePrepare_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _FileService_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CopyReplica",
			Handler:       _FileService_CopyReplica_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fileservice_definition.proto",
}
